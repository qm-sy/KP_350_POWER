C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS_RTU
OBJECT MODULE PLACED IN ..\Output\modbus_rtu.obj
COMPILER INVOKED BY: D:\APP\Keil_STM32\C51\BIN\C51.EXE ..\Emembed\Src\modbus_rtu.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(..\BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus_rtu.lst) OBJE
                    -CT(..\Output\modbus_rtu.obj)

line level    source

   1          #include "modbus_rtu.h"
   2          
   3          /**
   4           * @brief       modbus_rtu  无奇偶校验
   5           *
   6           * @param   void
   7           *
   8           * @return  void 
   9          **/
  10          void Modbus_Event( void )
  11          {
  12   1          uint16_t crc,rccrc;
  13   1      
  14   1          /*1.接收完毕                                           */
  15   1          if( rs485.RX2_rev_end_Flag == 1 )
  16   1          {
  17   2              /*2.清空接收完毕标志位                              */    
  18   2              rs485.RX2_rev_end_Flag = 0;
  19   2      
  20   2              /*3.CRC校验                                         */
  21   2              crc = MODBUS_CRC16(rs485.RX2_buf, rs485.RX2_rev_cnt-2);
  22   2              rccrc = (rs485.RX2_buf[rs485.RX2_rev_cnt-2]<<8) | (rs485.RX2_buf[rs485.RX2_rev_cnt-1]);
  23   2      
  24   2              /*4.清空接收计数                                    */
  25   2              rs485.RX2_rev_cnt = 0; 
  26   2      
  27   2              /*5.CRC校验通过，进行地址域校验                      */
  28   2              if( crc == rccrc )
  29   2              {
  30   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  31   3                  if( rs485.RX2_buf[0] == MY_ADDR )
  32   3                  {
  33   4                      switch ( rs485.RX2_buf[1] )
  34   4                      {
  35   5                          case 3:
  36   5                              Modbus_Fun3();
  37   5                              break;
  38   5                          case 4:
  39   5                              Modbus_Fun4();
  40   5                              break;
  41   5                          case 6:
  42   5                              Modbus_Fun6();
  43   5                              break;                           
  44   5                          default:
  45   5                              break;
  46   5                      }
  47   4                  }
  48   3              }
  49   2          }
  50   1      }
  51          
  52          /**
  53           * @brief       读输出寄存器  03
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 2   

  54           *
  55           * @param   void
  56           *
  57           * @return  void 
  58          **/
  59          void Modbus_Fun3( void )
  60          {
  61   1          uint16_t crc;
  62   1          uint8_t info_byte = 0;
  63   1      
  64   1          switch (rs485.RX2_buf[3])
  65   1          {
  66   2              /* 40001   两路PWM 开关状态及风速查询                 */
  67   2              case 0:
  68   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
  69   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
  70   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
  71   2      
  72   2                  info_byte |= (PWMB_CCR7 / 184)<<2;          //PWM7风速
  73   2                  info_byte |= (PWMB_CCR8 / 184)<<5;          //PWM8风速
  74   2                  if( PWMB_CCER2 & 0X01 )
  75   2                  {
  76   3                      info_byte |= 0x01;                      //PWM7开关状态
  77   3                  }
  78   2                  if( PWMB_CCER2 & 0X10 )
  79   2                  {
  80   3                      info_byte |= 0x02;                      //PWM8开关状态
  81   3                  }
  82   2      
  83   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
  84   2                  rs485.TX2_buf[4] = info_byte;               //Data1 L
  85   2      
  86   2                  crc = MODBUS_CRC16(rs485.TX2_buf,5);
  87   2      
  88   2                  rs485.TX2_buf[5] = crc>>8;                  //CRC H
  89   2                  rs485.TX2_buf[6] = crc;                     //CRC L
  90   2      
  91   2                  rs485.TX2_send_bytelength = 7;
  92   2      
  93   2                  S2CON |= S2TI;                              //开始发送
  94   2      
  95   2                  break;
  96   2      
  97   2              /* 40002   24V LED开关状态查询                       */
  98   2              case 1:
  99   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 100   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 101   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 102   2      
 103   2                  if( EX0 & 1 )
 104   2                  {
 105   3                      info_byte |= 0x01;                      //PWM7开关状态
 106   3                  }
 107   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
 108   2                  rs485.TX2_buf[4] = info_byte;               //Data1 L
 109   2      
 110   2                  crc = MODBUS_CRC16(rs485.TX2_buf,5);
 111   2       
 112   2                  rs485.TX2_buf[5] = crc>>8;                  //CRC H
 113   2                  rs485.TX2_buf[6] = crc;                     //CRC L
 114   2      
 115   2                  rs485.TX2_send_bytelength = 7;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 3   

 116   2      
 117   2                  S2CON |= S2TI;                              //开始发送
 118   2      
 119   2                  break;
 120   2      
 121   2              /* 40003   220V 输出状态查询                            */
 122   2              case 2 :
 123   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 124   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 125   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 126   2      
 127   2                  info_byte = ((ac_220.time_delay - 58000) / 75)<<1;
 128   2                  if( ac_220.AC_Statu & 1 )
 129   2                  {
 130   3                      info_byte |= 0x01;                      //220运行状态
 131   3                  }
 132   2      
 133   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
 134   2                  rs485.TX2_buf[4] = info_byte;              //Data1 L
 135   2      
 136   2                  crc = MODBUS_CRC16(rs485.TX2_buf,5);
 137   2       
 138   2                  rs485.TX2_buf[5] = crc>>8;                  //CRC H
 139   2                  rs485.TX2_buf[6] = crc;                     //CRC L
 140   2      
 141   2                  rs485.TX2_send_bytelength = 7;
 142   2      
 143   2                  S2CON |= S2TI;                              //开始发送
 144   2      
 145   2                  break;
 146   2      
 147   2              default:
 148   2                  break; 
 149   2          }
 150   1      }
 151          
 152          /**
 153           * @brief       读输入寄存器  04
 154           *
 155           * @param   void
 156           *
 157           * @return  void 
 158          **/
 159          void Modbus_Fun4( void )
 160          {
 161   1          uint16_t crc;
 162   1      
 163   1          switch (rs485.RX2_buf[3])
 164   1          {
 165   2              /*    30001 && 30002 4路NTC                       */
 166   2              case 0:                                         
 167   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 168   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 169   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 170   2                  rs485.RX2_buf[3] = get_temp(NTC_2);
 171   2                  rs485.RX2_buf[4] = get_temp(NTC_1);
 172   2                  rs485.RX2_buf[5] = get_temp(NTC_4);
 173   2                  rs485.RX2_buf[6] = get_temp(NTC_3);
 174   2      
 175   2                  crc = MODBUS_CRC16(rs485.TX2_buf,7);
 176   2      
 177   2                  rs485.TX2_buf[7] = crc>>8;                  //CRC H
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 4   

 178   2                  rs485.TX2_buf[8] = crc;                     //CRC L
 179   2                  
 180   2                  rs485.TX2_send_bytelength = 9;
 181   2      
 182   2                  S2CON |= S2TI;                              //开始发送
 183   2      
 184   2                  break;
 185   2      
 186   2              /*    30003 2路模拟量                               */
 187   2              case 2:    
 188   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 189   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 190   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 191   2      
 192   2                  rs485.TX2_buf[3] = 0xaa;                    //Data1 H
 193   2                  rs485.TX2_buf[4] = 0xbb;                    //Data1 L
 194   2      
 195   2                  crc = MODBUS_CRC16(rs485.TX2_buf,5);
 196   2                  rs485.TX2_buf[5] = crc>>8;                  //CRC H
 197   2                  rs485.TX2_buf[6] = crc;                     //CRC L
 198   2      
 199   2                  rs485.TX2_send_bytelength = 7;
 200   2      
 201   2                  S2CON |= S2TI;                              //开始发送
 202   2      
 203   2                  break;
 204   2      
 205   2              /*    30003 3路电流查询                             */
 206   2              case 3:    
 207   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 208   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 209   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 210   2      
 211   2                  rs485.TX2_buf[3] = get_current(I_OUT2);     //Data1 H
 212   2                  rs485.TX2_buf[4] = get_current(I_OUT1);     //Data1 L
 213   2                  rs485.TX2_buf[5] = 0x00;                    //Data2 H
 214   2                  rs485.TX2_buf[6] = get_current(I_OUT3);     //Data2 L
 215   2      
 216   2                  crc = MODBUS_CRC16(rs485.TX2_buf,7);
 217   2                  rs485.TX2_buf[7] = crc>>8;                  //CRC H
 218   2                  rs485.TX2_buf[8] = crc;                     //CRC L
 219   2      
 220   2                  rs485.TX2_send_bytelength = 9;
 221   2      
 222   2                  S2CON |= S2TI;                              //开始发送
 223   2      
 224   2                  break;
 225   2      
 226   2              default:
 227   2                  break;
 228   2          }
 229   1      }
 230          
 231          /**
 232           * @brief       写单个输出寄存器  06
 233           *
 234           * @param   void
 235           *
 236           * @return  void 
 237          **/
 238          void Modbus_Fun6( void )
 239          {
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 5   

 240   1          switch (rs485.RX2_buf[3])
 241   1          {
 242   2              /*  40001  两路PWM 开关状态及风速设置                 */
 243   2              case 0:                                         
 244   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 245   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 246   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 247   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 248   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 249   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 250   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 251   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 252   2      
 253   2                  if( rs485.TX2_buf[5] & 0X01 )
 254   2                  {
 255   3                      PWMB_CCER2 |= 0X01;
 256   3                  }else
 257   2                  {
 258   3                      PWMB_CCER2 &= 0XFE;
 259   3                  }
 260   2                  if( rs485.TX2_buf[5] & 0X02 )
 261   2                  {
 262   3                      PWMB_CCER2 |= 0X10;
 263   3                  }else
 264   2                  {
 265   3                      PWMB_CCER2 &= 0XEF;
 266   3                  }
 267   2                  PWMB_CCR7 = ((rs485.TX2_buf[5]>>2) & 0x07)*184;
 268   2                  PWMB_CCR8 = (rs485.TX2_buf[5]>>5)*184;
 269   2      
 270   2                  
 271   2                  rs485.TX2_send_bytelength = 8;
 272   2      
 273   2                  S2CON |= S2TI;                              //开始发送
 274   2      
 275   2                  break;
 276   2      
 277   2              /*  40002  24V LED开关状态设置                          */
 278   2              case 1:                                         
 279   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 280   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 281   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 282   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 283   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 284   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 285   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 286   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 287   2      
 288   2                  if( rs485.TX2_buf[5] & 0X01 )
 289   2                  {
 290   3                      DC_24V_out(1);
 291   3                  }else
 292   2                  {
 293   3                      DC_24V_out(0);
 294   3                  }
 295   2                  
 296   2                  rs485.TX2_send_bytelength = 8;
 297   2      
 298   2                  S2CON |= S2TI;                              //开始发送
 299   2      
 300   2                  break;
 301   2      
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 6   

 302   2              /*  40003  220V 开关及大小设置                          */
 303   2              case 2:                                         
 304   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 305   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 306   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 307   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 308   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 309   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 310   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 311   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 312   2      
 313   2                  if( rs485.TX2_buf[5] & 0X01 )
 314   2                  {
 315   3                      EX0 = 1;
 316   3                  }else
 317   2                  {
 318   3                      EX0 = 0;
 319   3                  }
 320   2                  AC_220V_out(rs485.TX2_buf[5]>>1);
 321   2      
 322   2                  rs485.TX2_send_bytelength = 8;
 323   2      
 324   2                  S2CON |= S2TI;                              //开始发送
 325   2      
 326   2                  break;  
 327   2      
 328   2              default:
 329   2                  break;   
 330   2          }
 331   1      }
 332          
 333          /**
 334           * @brief       crc校验函数
 335           * 
 336           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
 337           * @param   length:数据长度           
 338           * 
 339            @return  crc16:crc校验的值 2byte
 340           */
 341          uint16_t MODBUS_CRC16(uint8_t *buf, uint8_t length)
 342          {
 343   1              uint8_t i;
 344   1              uint16_t        crc16;
 345   1      
 346   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
 347   1              crc16 = 0xffff; 
 348   1      
 349   1              do
 350   1              {
 351   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */    
             -    
 352   2                      crc16 ^= (uint16_t)*buf;                //
 353   2                      for(i=0; i<8; i++)              
 354   2                      {
 355   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位 再异或0xA001    */
 356   3                              if(crc16 & 1)
 357   3                  {
 358   4                      crc16 = (crc16 >> 1) ^ 0xA001;
 359   4                  }
 360   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位                */
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/04/2025 21:02:32 PAGE 7   

 361   3                  else
 362   3                  {
 363   4                      crc16 >>= 1;
 364   4                  }           
 365   3                      }
 366   2                      buf++;
 367   2              }while(--length != 0);
 368   1      
 369   1              return  (crc16);
 370   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1100    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
