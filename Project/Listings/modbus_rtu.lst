C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS_RTU
OBJECT MODULE PLACED IN ..\Output\modbus_rtu.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\Emembed\Src\modbus_rtu.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus_rtu.lst) OBJECT(
                    -..\Output\modbus_rtu.obj)

line level    source

   1          #include "modbus_rtu.h"
   2          
   3          /**
   4           * @brief       modbus_rtu  无奇偶校验
   5           *
   6           * @param   void
   7           *
   8           * @return  void 
   9          **/
  10          void Modbus_Event( void )
  11          {
  12   1          uint16_t crc,rccrc;
  13   1      
  14   1          /*1.接收完毕                                           */
  15   1          if( rs485.RX2_rev_end_Flag == 1 )
  16   1          {
  17   2              /*2.清空接收完毕标志位                              */    
  18   2              rs485.RX2_rev_end_Flag = 0;
  19   2      
  20   2              /*3.CRC校验                                         */
  21   2              crc = MODBUS_CRC16(rs485.RX2_buf, rs485.RX2_rev_cnt-2);
  22   2              rccrc = (rs485.RX2_buf[rs485.RX2_rev_cnt-2]<<8) | (rs485.RX2_buf[rs485.RX2_rev_cnt-1]);
  23   2      
  24   2              /*4.清空接收计数                                    */
  25   2              rs485.RX2_rev_cnt = 0; 
  26   2      
  27   2              /*5.CRC校验通过，进行地址域校验                      */
  28   2              if( crc == rccrc )
  29   2              {
  30   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  31   3                  if( rs485.RX2_buf[0] == MY_ADDR )
  32   3                  {
  33   4                      switch ( rs485.RX2_buf[1] )
  34   4                      {
  35   5                          case 3:
  36   5                              Modbus_Fun3();
  37   5                              break;
  38   5                          case 4:
  39   5                              Modbus_Fun4();
  40   5                              break;
  41   5                          case 6:
  42   5                              Modbus_Fun6();
  43   5                              break;                           
  44   5                          default:
  45   5                              break;
  46   5                      }
  47   4                  }
  48   3              }
  49   2          }
  50   1      }
  51          
  52          /**
  53           * @brief       读输出寄存器  03
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 2   

  54           *
  55           * @param   void
  56           *
  57           * @return  void 
  58          **/
  59          void Modbus_Fun3( void )
  60          {
  61   1          uint8_t info_byte = 0;
  62   1      
  63   1          switch (rs485.RX2_buf[3])
  64   1          {
  65   2              /* 40001   两路PWM 开关状态及风速查询                 */
  66   2              case 0:
  67   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
  68   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
  69   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
  70   2      
  71   2                  info_byte |= (PWMB_CCR7 / 184)<<2;          //PWM7风速
  72   2                  info_byte |= (PWMB_CCR8 / 184)<<5;          //PWM8风速
  73   2                  if( PWMB_CCER2 & 0X01 )
  74   2                  {
  75   3                      info_byte |= 0x01;                      //PWM7开关状态
  76   3                  }
  77   2                  if( PWMB_CCER2 & 0X10 )
  78   2                  {
  79   3                      info_byte |= 0x02;                      //PWM8开关状态
  80   3                  }
  81   2      
  82   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
  83   2                  rs485.TX2_buf[4] = info_byte;               //Data1 L
  84   2      
  85   2                  slave_to_master(5);
  86   2      
  87   2                  break;
  88   2      
  89   2              /* 40002   24V LED开关状态查询                       */
  90   2              case 1:
  91   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
  92   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
  93   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
  94   2      
  95   2                  if( EX0 & 1 )
  96   2                  {
  97   3                      info_byte |= 0x01;                      //LED开关状态
  98   3                  }
  99   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
 100   2                  rs485.TX2_buf[4] = info_byte;               //Data1 L
 101   2      
 102   2                  slave_to_master(5);
 103   2      
 104   2                  break;
 105   2      
 106   2              /* 40003   220V 输出状态查询                            */
 107   2              case 2 :
 108   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 109   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 110   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 111   2      
 112   2                  info_byte = ((ac_220.time_delay - 58000) / 75)<<1;
 113   2                  if( EX0 & 1 )
 114   2                  {
 115   3                      info_byte |= 0x01;                      //220运行状态
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 3   

 116   3                  }
 117   2      
 118   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
 119   2                  rs485.TX2_buf[4] = info_byte;              //Data1 L
 120   2      
 121   2                  slave_to_master(5);
 122   2      
 123   2                  break;
 124   2      
 125   2              /* 40004 && 40005   温度报警值                      */
 126   2              case 3 :
 127   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 128   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 129   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 130   2      
 131   2                  rs485.TX2_buf[3] = temp.power_ch2_temp_alarm;   //Data1 H
 132   2                  rs485.TX2_buf[4] = temp.power_ch2_temp_alarm;   //Data1 L
 133   2                  rs485.TX2_buf[5] = 0x00;                        //Data2 H
 134   2                  rs485.TX2_buf[6] = temp.power_ch3_temp_alarm;   //Data2 L
 135   2      
 136   2                  slave_to_master(7);
 137   2      
 138   2                  break;
 139   2      
 140   2              default:
 141   2                  break; 
 142   2          }
 143   1      }
 144          
 145          /**
 146           * @brief       读输入寄存器  04
 147           *
 148           * @param   void
 149           *
 150           * @return  void 
 151          **/
 152          void Modbus_Fun4( void )
 153          {
 154   1          switch (rs485.RX2_buf[3])
 155   1          {
 156   2              /*    30001 && 30002 4路NTC                       */
 157   2              case 0:                                         
 158   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 159   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 160   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 161   2                  rs485.RX2_buf[3] = get_temp(NTC_2);
 162   2                  rs485.RX2_buf[4] = get_temp(NTC_1);
 163   2                  rs485.RX2_buf[5] = get_temp(NTC_4);
 164   2                  rs485.RX2_buf[6] = get_temp(NTC_3);
 165   2      
 166   2                  slave_to_master(7);
 167   2      
 168   2                  break;
 169   2      
 170   2              /*    30003 2路模拟量                               */
 171   2              case 2:    
 172   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 173   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 174   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 175   2      
 176   2                  rs485.TX2_buf[3] = 0xaa;                    //Data1 H
 177   2                  rs485.TX2_buf[4] = 0xbb;                    //Data1 L
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 4   

 178   2      
 179   2                  slave_to_master(5);
 180   2      
 181   2                  break;
 182   2      
 183   2              /*    30003 3路电流查询                             */
 184   2              case 3:    
 185   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 186   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 187   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 188   2      
 189   2                  rs485.TX2_buf[3] = get_current(I_OUT2);     //Data1 H
 190   2                  rs485.TX2_buf[4] = get_current(I_OUT1);     //Data1 L
 191   2                  rs485.TX2_buf[5] = 0x00;                    //Data2 H
 192   2                  rs485.TX2_buf[6] = get_current(I_OUT3);     //Data2 L
 193   2      
 194   2                  slave_to_master(5);
 195   2      
 196   2                  break;
 197   2      
 198   2              default:
 199   2                  break;
 200   2          }
 201   1      }
 202          
 203          /**
 204           * @brief       写单个输出寄存器  06
 205           *
 206           * @param   void
 207           *
 208           * @return  void 
 209          **/
 210          void Modbus_Fun6( void )
 211          {
 212   1          switch (rs485.RX2_buf[3])
 213   1          {
 214   2              /*  40001  两路PWM 开关状态及风速设置                 */
 215   2              case 0:                                         
 216   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 217   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 218   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 219   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 220   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 221   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 222   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 223   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 224   2      
 225   2                  if( rs485.TX2_buf[5] & 0X01 )
 226   2                  {
 227   3                      PWMB_CCER2 |= 0X01;
 228   3                  }else
 229   2                  {
 230   3                      PWMB_CCER2 &= 0XFE;
 231   3                  }
 232   2                  if( rs485.TX2_buf[5] & 0X02 )
 233   2                  {
 234   3                      PWMB_CCER2 |= 0X10;
 235   3                  }else
 236   2                  {
 237   3                      PWMB_CCER2 &= 0XEF;
 238   3                  }
 239   2                  
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 5   

 240   2                  PWMB_CCR7 = ((rs485.TX2_buf[5]>>2) & 0x07)*184;
 241   2                  PWMB_CCR8 = (rs485.TX2_buf[5]>>5)*184;
 242   2      
 243   2                  rs485.TX2_send_bytelength = 8;
 244   2      
 245   2                  S2CON |= S2TI;                              //开始发送
 246   2      
 247   2                  eeprom.pwm_info = rs485.TX2_buf[5];
 248   2                  eeprom_data_record();
 249   2      
 250   2                break;
 251   2      
 252   2              /*  40002  24V LED开关状态设置                          */
 253   2              case 1:                                         
 254   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 255   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 256   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 257   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 258   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 259   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 260   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 261   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 262   2      
 263   2                  if( rs485.TX2_buf[5] & 0X01 )
 264   2                  {
 265   3                      DC_24V_out(1);
 266   3                  }else
 267   2                  {
 268   3                      DC_24V_out(0);
 269   3                  }
 270   2                  
 271   2                  rs485.TX2_send_bytelength = 8;
 272   2      
 273   2                  S2CON |= S2TI;                              //开始发送
 274   2      
 275   2                  eeprom.led_info = rs485.TX2_buf[5];
 276   2                  eeprom_data_record();
 277   2      
 278   2                  break;
 279   2      
 280   2              /*  40003  220V 开关及大小设置                          */
 281   2              case 2:                                         
 282   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 283   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 284   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 285   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 286   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 287   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 288   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 289   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 290   2      
 291   2                  if( rs485.TX2_buf[5] & 0X01 )
 292   2                  {
 293   3                      EX0 = 1;
 294   3                  }else
 295   2                  {
 296   3                      EX0 = 0;
 297   3                  }
 298   2                  AC_220V_out(rs485.TX2_buf[5]>>1);
 299   2      
 300   2                  rs485.TX2_send_bytelength = 8;
 301   2      
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 6   

 302   2                  S2CON |= S2TI;                              //开始发送
 303   2      
 304   2                  eeprom.ac220_info = rs485.TX2_buf[5];
 305   2                  eeprom_data_record();
 306   2      
 307   2                  break;  
 308   2      
 309   2              default:
 310   2                  break;   
 311   2          }
 312   1      }
 313          
 314          /**
 315           * @brief       写多个输出寄存器  16
 316           *
 317           * @param   void
 318           *
 319           * @return  void 
 320          **/
 321          void Modbus_Fun16( void )
 322          {
 323   1          uint16_t crc;
 324   1      
 325   1          switch (rs485.RX2_buf[3])
 326   1          {
 327   2              case 3:
 328   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 329   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 330   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //start reg H
 331   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //start reg L
 332   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Num H
 333   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Num L
 334   2      
 335   2                  temp.power_ch1_temp_alarm = rs485.RX2_buf[9];
 336   2                  temp.power_ch2_temp_alarm = rs485.RX2_buf[8];
 337   2                  temp.power_ch3_temp_alarm = rs485.RX2_buf[11];
 338   2      
 339   2                  crc = MODBUS_CRC16(rs485.TX2_buf,6);
 340   2      
 341   2                  rs485.TX2_buf[6] = crc>>8;                 //CRC H
 342   2                  rs485.TX2_buf[7] = crc;                  //CRC L
 343   2      
 344   2                  rs485.TX2_send_bytelength = 8;
 345   2      
 346   2                  S2CON |= S2TI;                                  //开始发送
 347   2      
 348   2                  eeprom.temp_alarm_value1 = temp.power_ch1_temp_alarm;
 349   2                  eeprom.temp_alarm_value2 = temp.power_ch2_temp_alarm;
 350   2                  eeprom.temp_alarm_value3 = temp.power_ch3_temp_alarm;
 351   2      
 352   2                  eeprom_data_record();
 353   2      
 354   2              break;
 355   2          }
 356   1      
 357   1      }
 358          /**
 359           * @brief       crc校验函数
 360           * 
 361           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
 362           * @param   length:数据长度           
 363           * 
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 7   

 364            @return  crc16:crc校验的值 2byte
 365           */
 366          uint16_t MODBUS_CRC16(uint8_t *buf, uint8_t length)
 367          {
 368   1              uint8_t i;
 369   1              uint16_t        crc16;
 370   1      
 371   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
 372   1              crc16 = 0xffff; 
 373   1      
 374   1              do
 375   1              {
 376   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */    
             -    
 377   2                      crc16 ^= (uint16_t)*buf;                //
 378   2                      for(i=0; i<8; i++)              
 379   2                      {
 380   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位 再异或0xA001    */
 381   3                              if(crc16 & 1)
 382   3                  {
 383   4                      crc16 = (crc16 >> 1) ^ 0xA001;
 384   4                  }
 385   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位                */
 386   3                  else
 387   3                  {
 388   4                      crc16 >>= 1;
 389   4                  }           
 390   3                      }
 391   2                      buf++;
 392   2              }while(--length != 0);
 393   1      
 394   1              return  (crc16);
 395   1      }
 396          
 397          /**
 398           * @brief       从机回复主机
 399           *  
 400           * @param   length:数据长度           
 401           * 
 402            @return  crc16:crc校验的值 2byte
 403           */
 404          void slave_to_master(uint8_t length)
 405          {
 406   1          uint16_t crc;
 407   1      
 408   1          crc = MODBUS_CRC16(rs485.TX2_buf,length);
 409   1      
 410   1          rs485.TX2_buf[length] = crc>>8;                 //CRC H
 411   1          rs485.TX2_buf[length+1] = crc;                  //CRC L
 412   1      
 413   1          rs485.TX2_send_bytelength = length + 2;
 414   1      
 415   1          S2CON |= S2TI;                                  //开始发送
 416   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 16:57:40 PAGE 8   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
