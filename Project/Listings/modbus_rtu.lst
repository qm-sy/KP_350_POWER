C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS_RTU
OBJECT MODULE PLACED IN ..\Output\modbus_rtu.obj
COMPILER INVOKED BY: D:\APP\Keil_STM32\C51\BIN\C51.EXE ..\Emembed\Src\modbus_rtu.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(..\BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus_rtu.lst) OBJE
                    -CT(..\Output\modbus_rtu.obj)

line level    source

   1          #include "modbus_rtu.h"
   2          
   3          /**
   4           * @brief       modbus_rtu  无奇偶校验
   5           *
   6           * @param   void
   7           *
   8           * @return  void 
   9          **/
  10          void Modbus_Event( void )
  11          {
  12   1          uint16_t crc,rccrc;
  13   1      
  14   1          /*1.接收完毕                                           */
  15   1          if( rs485.RX2_rev_end_Flag == 1 )
  16   1          {
  17   2              /*2.清空接收完毕标志位                              */    
  18   2              rs485.RX2_rev_end_Flag = 0;
  19   2      
  20   2              /*3.CRC校验                                         */
  21   2              crc = MODBUS_CRC16(rs485.RX2_buf, rs485.RX2_rev_cnt-2);
  22   2              rccrc = (rs485.RX2_buf[rs485.RX2_rev_cnt-2]<<8) | (rs485.RX2_buf[rs485.RX2_rev_cnt-1]);
  23   2      
  24   2              /*4.清空接收计数                                    */
  25   2              rs485.RX2_rev_cnt = 0; 
  26   2      
  27   2              /*5.CRC校验通过，进行地址域校验                      */
  28   2              if( crc == rccrc )
  29   2              {
  30   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  31   3                  if( rs485.RX2_buf[0] == MY_ADDR )
  32   3                  {
  33   4                      switch ( rs485.RX2_buf[1] )
  34   4                      {
  35   5                          case 0x03:
  36   5                              Modbus_Fun3();
  37   5                              break;
  38   5      
  39   5                          case 0x04:
  40   5                              Modbus_Fun4();
  41   5                              break;
  42   5      
  43   5                          case 0x06:
  44   5                              Modbus_Fun6();
  45   5                              break;  
  46   5      
  47   5                          case 0x10:  
  48   5                              Modbus_Fun16();
  49   5      
  50   5                          default:
  51   5                              break;
  52   5                      }
  53   4                  }
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 2   

  54   3              }
  55   2          }
  56   1      }
  57          
  58          /**
  59           * @brief       读输出寄存器  03
  60           *
  61           * @param   void
  62           *
  63           * @return  void 
  64          **/
  65          void Modbus_Fun3( void )
  66          {
  67   1          uint8_t info_byte = 0;
  68   1      
  69   1          switch (rs485.RX2_buf[3])
  70   1          {
  71   2              /* 40001   两路PWM 开关状态及风速查询                 */
  72   2              case 0:
  73   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
  74   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
  75   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
  76   2      
  77   2                  info_byte |= (PWMB_CCR7 / 184)<<2;          //PWM7风速
  78   2                  info_byte |= (PWMB_CCR8 / 184)<<5;          //PWM8风速
  79   2                  if( PWMB_CCER2 & 0X01 )
  80   2                  {
  81   3                      info_byte |= 0x01;                      //PWM7开关状态
  82   3                  }
  83   2                  if( PWMB_CCER2 & 0X10 )
  84   2                  {
  85   3                      info_byte |= 0x02;                      //PWM8开关状态
  86   3                  }
  87   2      
  88   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
  89   2                  rs485.TX2_buf[4] = info_byte;               //Data1 L
  90   2      
  91   2                  slave_to_master(5);
  92   2      
  93   2                  break;
  94   2      
  95   2              /* 40002   24V LED开关状态查询                       */
  96   2              case 1:
  97   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
  98   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
  99   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 100   2      
 101   2                  if( EX0 & 1 )
 102   2                  {
 103   3                      info_byte |= 0x01;                      //LED开关状态
 104   3                  }
 105   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
 106   2                  rs485.TX2_buf[4] = info_byte;               //Data1 L
 107   2      
 108   2                  slave_to_master(5);
 109   2      
 110   2                  break;
 111   2      
 112   2              /* 40003   220V 输出状态查询                            */
 113   2              case 2 :
 114   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 115   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 3   

 116   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 117   2      
 118   2                  info_byte = ((ac_220.time_delay - 58000) / 75)<<1;
 119   2                  if( EX0 & 1 )
 120   2                  {
 121   3                      info_byte |= 0x01;                      //220运行状态
 122   3                  }
 123   2      
 124   2                  rs485.TX2_buf[3] = 0x00;                    //Data1 H
 125   2                  rs485.TX2_buf[4] = info_byte;              //Data1 L
 126   2      
 127   2                  slave_to_master(5);
 128   2      
 129   2                  break;
 130   2      
 131   2              /* 40004 && 40005   温度报警值                      */
 132   2              case 3 :
 133   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 134   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 135   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 136   2      
 137   2                  rs485.TX2_buf[3] = temp.temp_alarm_value2;   //Data1 H
 138   2                  rs485.TX2_buf[4] = temp.temp_alarm_value1;   //Data1 L
 139   2                  rs485.TX2_buf[5] = 0x00;                        //Data2 H
 140   2                  rs485.TX2_buf[6] = temp.temp_alarm_value3;   //Data2 L
 141   2      
 142   2                  slave_to_master(7);
 143   2      
 144   2                  break;
 145   2      
 146   2              default:
 147   2                  break; 
 148   2          }
 149   1      }
 150          
 151          /**
 152           * @brief       读输入寄存器  04
 153           *
 154           * @param   void
 155           *
 156           * @return  void 
 157          **/
 158          void Modbus_Fun4( void )
 159          {
 160   1          switch (rs485.RX2_buf[3])
 161   1          {
 162   2              /*    30001 && 30002 4路NTC                       */
 163   2              case 0:                                         
 164   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 165   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 166   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 167   2                  rs485.RX2_buf[3] = get_temp(NTC_2);
 168   2                  rs485.RX2_buf[4] = get_temp(NTC_1);
 169   2                  rs485.RX2_buf[5] = get_temp(NTC_4);
 170   2                  rs485.RX2_buf[6] = get_temp(NTC_3);
 171   2      
 172   2                  slave_to_master(7);
 173   2      
 174   2                  break;
 175   2      
 176   2              /*    30003 2路模拟量                               */
 177   2              case 2:    
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 4   

 178   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 179   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 180   2                  rs485.TX2_buf[2] = 2;                       //Byte Count
 181   2      
 182   2                  rs485.TX2_buf[3] = 0xaa;                    //Data1 H
 183   2                  rs485.TX2_buf[4] = 0xbb;                    //Data1 L
 184   2      
 185   2                  slave_to_master(5);
 186   2      
 187   2                  break;
 188   2      
 189   2              /*    30003 3路电流查询                             */
 190   2              case 3:    
 191   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 192   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 193   2                  rs485.TX2_buf[2] = 4;                       //Byte Count
 194   2      
 195   2                  rs485.TX2_buf[3] = get_current(I_OUT2);     //Data1 H
 196   2                  rs485.TX2_buf[4] = get_current(I_OUT1);     //Data1 L
 197   2                  rs485.TX2_buf[5] = 0x00;                    //Data2 H
 198   2                  rs485.TX2_buf[6] = get_current(I_OUT3);     //Data2 L
 199   2      
 200   2                  slave_to_master(5);
 201   2      
 202   2                  break;
 203   2      
 204   2              default:
 205   2                  break;
 206   2          }
 207   1      }
 208          
 209          /**
 210           * @brief       写单个输出寄存器  06
 211           *
 212           * @param   void
 213           *
 214           * @return  void 
 215          **/
 216          void Modbus_Fun6( void )
 217          {
 218   1          switch (rs485.RX2_buf[3])
 219   1          {
 220   2              /*  40001  两路PWM 开关状态及风速设置                 */
 221   2              case 0:                                         
 222   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 223   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 224   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 225   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 226   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 227   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 228   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 229   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 230   2      
 231   2                  if( rs485.TX2_buf[5] & 0X01 )
 232   2                  {
 233   3                      PWMB_CCER2 |= 0X01;
 234   3                  }else
 235   2                  {
 236   3                      PWMB_CCER2 &= 0XFE;
 237   3                  }
 238   2                  if( rs485.TX2_buf[5] & 0X02 )
 239   2                  {
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 5   

 240   3                      PWMB_CCER2 |= 0X10;
 241   3                  }else
 242   2                  {
 243   3                      PWMB_CCER2 &= 0XEF;
 244   3                  }
 245   2                  
 246   2                  PWMB_CCR7 = ((rs485.TX2_buf[5]>>2) & 0x07)*184;
 247   2                  PWMB_CCR8 = (rs485.TX2_buf[5]>>5)*184;
 248   2      
 249   2                  rs485.TX2_send_bytelength = 8;
 250   2      
 251   2                  DR2 = 1;                                    //485可以发送
 252   2                  S2CON |= S2TI;                              //开始发送
 253   2      
 254   2                  eeprom.pwm_info = rs485.TX2_buf[5];
 255   2                  eeprom_data_record();
 256   2      
 257   2                break;
 258   2      
 259   2              /*  40002  24V LED开关状态设置                          */
 260   2              case 1:                                         
 261   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 262   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 263   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 264   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 265   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 266   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 267   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 268   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 269   2      
 270   2                  if( rs485.TX2_buf[5] & 0X01 )
 271   2                  {
 272   3                      DC_24V_out(1);
 273   3                  }else
 274   2                  {
 275   3                      DC_24V_out(0);
 276   3                  }
 277   2                  
 278   2                  rs485.TX2_send_bytelength = 8;
 279   2      
 280   2                  DR2 = 1;                                    //485可以发送
 281   2                  S2CON |= S2TI;                              //开始发送
 282   2      
 283   2                  eeprom.led_info = rs485.TX2_buf[5];
 284   2                  eeprom_data_record();
 285   2      
 286   2                  break;
 287   2      
 288   2              /*  40003  220V 开关及大小设置                          */
 289   2              case 2:                                         
 290   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 291   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 292   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //reg H
 293   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //reg L
 294   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Value H
 295   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Value L
 296   2                  rs485.TX2_buf[6] = rs485.RX2_buf[6];        //CRC H
 297   2                  rs485.TX2_buf[7] = rs485.RX2_buf[7];        //CRC L
 298   2      
 299   2                  if( rs485.TX2_buf[5] & 0X01 )
 300   2                  {
 301   3                      EX0 = 1;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 6   

 302   3                  }else
 303   2                  {
 304   3                      EX0 = 0;
 305   3                  }
 306   2                  AC_220V_out(rs485.TX2_buf[5]>>1);
 307   2      
 308   2                  rs485.TX2_send_bytelength = 8;
 309   2                  DR2 = 1;                                    //485可以发送
 310   2                  S2CON |= S2TI;                              //开始发送
 311   2      
 312   2                  eeprom.ac220_info = rs485.TX2_buf[5];
 313   2                  eeprom_data_record();
 314   2      
 315   2                  break;  
 316   2      
 317   2              default:
 318   2                  break;   
 319   2          }
 320   1      }
 321          
 322          /**
 323           * @brief       写多个输出寄存器  16
 324           *
 325           * @param   void
 326           *
 327           * @return  void 
 328          **/
 329          void Modbus_Fun16( void )
 330          {
 331   1          uint16_t crc;
 332   1      
 333   1          switch (rs485.RX2_buf[3])
 334   1              case 3:
 335   1          {
 336   2                  rs485.TX2_buf[0] = rs485.RX2_buf[0];        //地址域
 337   2                  rs485.TX2_buf[1] = rs485.RX2_buf[1];        //功能域
 338   2                  rs485.TX2_buf[2] = rs485.RX2_buf[2];        //start reg H
 339   2                  rs485.TX2_buf[3] = rs485.RX2_buf[3];        //start reg L
 340   2                  rs485.TX2_buf[4] = rs485.RX2_buf[4];        //Num H
 341   2                  rs485.TX2_buf[5] = rs485.RX2_buf[5];        //Num L
 342   2      
 343   2                  temp.temp_alarm_value1 = rs485.RX2_buf[8];
 344   2                  temp.temp_alarm_value2 = rs485.RX2_buf[7];
 345   2                  temp.temp_alarm_value3 = rs485.RX2_buf[10];
 346   2      
 347   2                  crc = MODBUS_CRC16(rs485.TX2_buf,6);
 348   2      
 349   2                  rs485.TX2_buf[6] = crc>>8;                 //CRC H
 350   2                  rs485.TX2_buf[7] = crc;                    //CRC L
 351   2      
 352   2                  rs485.TX2_send_bytelength = 8;
 353   2      
 354   2                  DR2 = 1;                                   //485可以发送
 355   2                  S2CON |= S2TI;                             //开始发送
 356   2      
 357   2                  eeprom.temp_alarm_value1 = temp.temp_alarm_value1;
 358   2                  eeprom.temp_alarm_value2 = temp.temp_alarm_value2;
 359   2                  eeprom.temp_alarm_value3 = temp.temp_alarm_value3;
 360   2      
 361   2                  eeprom_data_record();
 362   2      
 363   2              break;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 7   

 364   2          }
 365   1      }
 366          
 367          /**
 368           * @brief       crc校验函数
 369           * 
 370           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
 371           * @param   length:数据长度           
 372           * 
 373            @return  crc16:crc校验的值 2byte
 374           */
 375          uint16_t MODBUS_CRC16(uint8_t *buf, uint8_t length)
 376          {
 377   1              uint8_t i;
 378   1              uint16_t        crc16;
 379   1      
 380   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
 381   1              crc16 = 0xffff; 
 382   1      
 383   1              do
 384   1              {
 385   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */    
             -    
 386   2                      crc16 ^= (uint16_t)*buf;                //
 387   2                      for(i=0; i<8; i++)              
 388   2                      {
 389   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位 再异或0xA001    */
 390   3                              if(crc16 & 1)
 391   3                  {
 392   4                      crc16 = (crc16 >> 1) ^ 0xA001;
 393   4                  }
 394   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位                */
 395   3                  else
 396   3                  {
 397   4                      crc16 >>= 1;
 398   4                  }           
 399   3                      }
 400   2                      buf++;
 401   2              }while(--length != 0);
 402   1      
 403   1              return  (crc16);
 404   1      }
 405          
 406          /**
 407           * @brief       从机回复主机
 408           *  
 409           * @param   length:数据长度           
 410           * 
 411            @return  crc16:crc校验的值 2byte
 412           */
 413          void slave_to_master(uint8_t length)
 414          {
 415   1          uint16_t crc;
 416   1      
 417   1          crc = MODBUS_CRC16(rs485.TX2_buf,length);
 418   1      
 419   1          rs485.TX2_buf[length] = crc>>8;                 //CRC H
 420   1          rs485.TX2_buf[length+1] = crc;                  //CRC L
 421   1      
 422   1          rs485.TX2_send_bytelength = length + 2;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        02/05/2025 23:03:02 PAGE 8   

 423   1      
 424   1          DR2 = 1;                                        //485可以发送
 425   1          S2CON |= S2TI;                                  //开始发送
 426   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1297    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
