C51 COMPILER V9.60.7.0   NTC                                                               02/08/2025 17:00:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE NTC
OBJECT MODULE PLACED IN ..\Output\ntc.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\BSP\Src\ntc.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BSP\Inc;..
                    -\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\ntc.lst) OBJECT(..\Output\ntc.obj)

line level    source

   1          #include "ntc.h"
   2          
   3          #define NTCTabNum 121
   4          
   5          TEMP temp;
   6          
   7          static uint16_t MF52E_tab[NTCTabNum]={
   8              282,/* 0 */
   9              291,/* 1 */     300,/* 2 */     309,/* 3 */     318,/* 3 */     327,/* 5 */
  10              337,/* 6 */     346,/* 7 */     356,/* 8 */     366,/* 9 */     375,/* 10 */
  11              385,/* 11 */    395,/* 12 */    404,/* 13 */    414,/* 14 */    424,/* 15 */
  12              434,/* 16 */    444,/* 17 */    454,/* 18 */    463,/* 19 */    473,/* 20 */
  13              483,/* 21 */    493,/* 22 */    502,/* 23 */    512,/* 24 */    522,/* 25 */
  14              531,/* 26 */    541,/* 27 */    550,/* 28 */    559,/* 29 */    568,/* 30 */
  15              578,/* 31 */    587,/* 32 */    596,/* 33 */    604,/* 34 */    613,/* 35 */
  16              622,/* 36 */    630,/* 37 */    639,/* 38 */    647,/* 39 */    655,/* 40 */
  17              663,/* 41 */    671,/* 42 */    679,/* 43 */    687,/* 44 */    694,/* 45 */
  18              702,/* 46 */    709,/* 47 */    716,/* 48 */    723,/* 49 */    730,/* 50 */
  19              737,/* 51 */    743,/* 52 */    750,/* 53 */    756,/* 54 */    763,/* 55 */
  20              769,/* 56 */    775,/* 57 */    781,/* 58 */    786,/* 59 */    792,/* 60 */
  21              797,/* 61 */    803,/* 62 */    808,/* 63 */    813,/* 64 */    818,/* 65 */
  22              823,/* 66 */    828,/* 67 */    833,/* 68 */    837,/* 69 */    842,/* 70 */
  23              846,/* 71 */    850,/* 72 */    854,/* 73 */    858,/* 74 */    862,/* 75 */
  24              866,/* 76 */    870,/* 77 */    874,/* 78 */    877,/* 79 */    881,/* 80 */
  25              884,/* 81 */    888,/* 82 */    891,/* 83 */    894,/* 84 */    897,/* 85 */
  26              900,/* 86 */    903,/* 87 */    906,/* 88 */    909,/* 89 */    911,/* 90 */
  27              914,/* 91 */    917,/* 92 */    919,/* 93 */    921,/* 94 */    924,/* 95 */
  28              926,/* 96 */    928,/* 97 */    931,/* 98 */    933,/* 99 */    935,/* 100 */
  29              937,/* 101 */   939,/* 102 */   941,/* 103 */   943,/* 104 */   945,/* 105 */
  30              946,/* 106 */   948,/* 107 */   950,/* 108 */   952,/* 109 */   953,/* 110 */
  31              955,/* 111 */   956,/* 112 */   958,/* 113 */   959,/* 114 */   961,/* 115 */
  32              962,/* 116 */   964,/* 117 */   965,/* 118 */   966,/* 119 */   967 /* 120 */
  33          };      
  34          
  35          /**
  36           * @brief 查表 找到adc_val对应的temp
  37           *
  38           * @param[in] temp_tab 对照表
  39           * @param[in] tab_num 表元素个数
  40           * @param[in] adc_val adc_val
  41           * 
  42           * @return  temp
  43           * 
  44          **/
  45          static uint16_t LookupTable( uint16_t *temp_tab, uint8_t tab_num, uint16_t adc_val )
  46          {
  47   1                      uint8_t i;
  48   1              uint16_t temp_val = 0;
  49   1              
  50   1                      for( i = 0; i < (tab_num-1); i++ )
  51   1                      {
  52   2                                      if(( adc_val >= temp_tab[i] ) && ( adc_val < temp_tab[i+1]) )
  53   2                                      temp_val = i;   
  54   2                      }
C51 COMPILER V9.60.7.0   NTC                                                               02/08/2025 17:00:01 PAGE 2   

  55   1                      return temp_val;
  56   1      }
  57          
  58          /**
  59           * @brief 取10次adc_val均值对应的temp
  60           *
  61           * @param[in] channle_x ntc通道1~4
  62           * 
  63           * @return  temp :最终温度
  64           * 
  65          **/
  66          uint16_t get_temp( uint8_t channle_x )
  67          {
  68   1          uint8_t t;
  69   1          uint16_t adc_val;
  70   1          uint16_t temp;
  71   1      
  72   1          /* 1, 取10次adc_val                           */
  73   1          for( t = 0; t < 10; t++ )
  74   1                      {
  75   2                              adc_val += Get_ADC_12bit(channle_x);
  76   2                      }              
  77   1          adc_val = adc_val/10;
  78   1          printf("The adc_val is %d \r\n",adc_val);
  79   1          /* 2, 查表，找到对应温度值                     */
  80   1          temp = LookupTable( MF52E_tab, NTCTabNum, adc_val );
  81   1          printf("The temp is %d \r\n",temp);
  82   1          return temp;
  83   1      }
  84          
  85          /**
  86           * @brief 温度扫描，1s/次 控制功率开关
  87           *
  88           * @param[in] 
  89           * 
  90           * @return  
  91           * 
  92          **/
  93          void temp_scan( void )
  94          {
  95   1          if( temp.temp_scan_flag == 1)
  96   1          {
  97   2              temp.temp_value1 =  get_temp(NTC_1);
  98   2              temp.temp_value2 =  get_temp(NTC_2);
  99   2              temp.temp_value3 =  get_temp(NTC_3);
 100   2      
 101   2              if( temp.temp_value1 >= temp.temp_alarm_value1 )
 102   2              {
 103   3                  ac_220.ac220_on_off &= ~0x01;        //001
 104   3              }else
 105   2              {
 106   3                  ac_220.ac220_on_off |= 0x01;
 107   3              }
 108   2      
 109   2              if( temp.temp_value2 >= temp.temp_alarm_value2 )
 110   2              {
 111   3                  ac_220.ac220_on_off &= ~0x02;        //101
 112   3              }else
 113   2              {
 114   3                  ac_220.ac220_on_off |= 0x02;
 115   3              }
 116   2      
C51 COMPILER V9.60.7.0   NTC                                                               02/08/2025 17:00:01 PAGE 3   

 117   2              if( temp.temp_value3 >= temp.temp_alarm_value3 )
 118   2              {
 119   3                  ac_220.ac220_on_off &= ~0x04;        //011
 120   3              }else
 121   2              {
 122   3                  ac_220.ac220_on_off |= 0x04;
 123   3              }
 124   2      
 125   2              temp.temp_scan_flag = 0;
 126   2          }
 127   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    396    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =    249      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
